service:
  name: serverless-memo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

#
package:
  individually: true
  
#
provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  tracing: 
    apiGateway: true
    lambda: true
    
  environment:
    MEMOS_TABLE: Memos-${self:provider.stage}
    MEMO_NAME_INDEX: MemoIdIndex
    SIGNED_URL_EXPIRATION: 300
    PHOTOS_S3_BUCKET: serverless-memo-photos-aleks-${self:provider.stage}
    AUTH_0_SECRET_ID: Auth0Secret-aleks-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn

#  
tracing:
  lambda: true
  apiGateway: true


#
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for keeping track of Memo lists
    models:
      - name: CreateMemoRequest
        contentType: application/json
        schema: ${file(models/create-memo-request.json)}

#
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  SearchMemos:
    environment:
      MEMO_NAME_INDEX: ${self:provider.environment.MEMO_NAME_INDEX}
      ES_ENDPOINT: !GetAtt MemosSearch.DomainEndpoint
    handler: src/lambda/http/searchMemos.handler
    events:
      - http:
          method: get
          path: memos/search
          cors: true
      - http:
          method: post
          path: memos-index/_search
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          #- dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          #- dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMOS_TABLE}/index/${self:provider.environment.MEMO_NAME_INDEX}


  GetMemos:
    handler: src/lambda/http/getMemos.handler
    events:
      - http:
          method: get
          path: memos
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMOS_TABLE}/index/${self:provider.environment.MEMO_NAME_INDEX}
      

  CreateMemo:
    handler: src/lambda/http/createMemo.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: memos
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Memo item
            description: Create a new Memo item
            requestModels:
              'application/json': CreateMemoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMOS_TABLE}

  DeleteMemo:
    handler: src/lambda/http/deleteMemo.handler
    events:
      - http:
          method: delete
          authorizer: Auth
          path: memos/{memoId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMOS_TABLE}
      
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: memos/{memoId}/photo
          authorizer: Auth
          cors: true          
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.PHOTOS_S3_BUCKET}/*
      
  SyncWithElasticsearch:
    environment:
      MEMO_NAME_INDEX: ${self:provider.environment.MEMO_NAME_INDEX}
      ES_ENDPOINT: !GetAtt MemosSearch.DomainEndpoint
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt MemosTable.StreamArn



resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,PATCH,POST,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    MemosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: memoName
            AttributeType: S
          - AttributeName: memoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: memoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.MEMOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.MEMO_NAME_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: memoName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        
    PhotosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PHOTOS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000        

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.PHOTOS_S3_BUCKET}/*'
        Bucket: !Ref PhotosBucket

        
    MemosSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: memos-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'


    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-aleks-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey